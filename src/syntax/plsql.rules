S >>> { S } PLSQL_BLOCK
PLSQL_BLOCK >>> ANON_BLOCK

ANON_BLOCK >>>
declare
{ VARS }
BLOCK
/

VARS >>> { VARS } VAR

VAR >>> idt type { := EXPRESSION } ;

EXPRESSION >>> const <<< ! :=

EXPRESSION >>> idt <<< ! := <,< type <,< in

EXPRESSION >>> BOOL_EXPRESSION

BOOL_EXPRESSION >>> EXPRESSION >  EXPRESSION
BOOL_EXPRESSION >>> EXPRESSION >= EXPRESSION
BOOL_EXPRESSION >>> EXPRESSION <= EXPRESSION
BOOL_EXPRESSION >>> EXPRESSION =  EXPRESSION
BOOL_EXPRESSION >>> EXPRESSION != EXPRESSION
BOOL_EXPRESSION >>> EXPRESSION <> EXPRESSION
BOOL_EXPRESSION >>> EXPRESSION ~= EXPRESSION
BOOL_EXPRESSION >>> EXPRESSION ^= EXPRESSION

BLOCK >>> 
begin
STATEMENTS
end ;

STATEMENTS >>> { STATEMENTS } STATEMENT

STATEMENT >>> FOR_STATEMENT

FOR_STATEMENT >>>
for idt in { reverse } EXPRESSION .. EXPRESSION
loop
STATEMENTS
end loop ;

STATEMENT >>> ASSIGN_STATEMENT

ASSIGN_STATEMENT >>>
idt := EXPRESSION ;

EXPRESSION >>> CASE_EXPRESSION

CASE_EXPRESSION >>>
case EXPRESSION
CASE_STATEMENTS
{ else EXPRESSION }
end

CASE_STATEMENTS >>> { CASE_STATEMENTS } CASE_STATEMENT

CASE_STATEMENT >>> when EXPRESSION then EXPRESSION
